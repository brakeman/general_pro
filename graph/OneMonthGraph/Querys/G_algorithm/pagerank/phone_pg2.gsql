use graph OneMonthNet
drop query pageRank_phone

#CREATE OR REPLACE QUERY sub_query_phone(DATETIME start_t, DATETIME end_t, STRING node) FOR GRAPH OneMonthNet RETURNS(SetAccum<VERTEX>)
#{
#    SetAccum<VERTEX<PhoneNumber>> @@phone;
#    init = {node.*};
#    save_target = select t from init:t
#    ACCUM
#    FOREACH i IN t.datetime_set DO
#        IF (i BETWEEN start_t AND end_t) THEN
#            @@phone += t
#        END
#    END;
#    RETURN @@phone;
#}


CREATE OR REPLACE QUERY pageRank_phone (DATETIME start_t, DATETIME end_t, STRING node, FLOAT maxChange, INT maxIter, FLOAT damping) FOR GRAPH OneMonthNet
{
    MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
    SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
    SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
    SetAccum<VERTEX> @@testSet;
    @@testSet += sub_query_phone1(start_t, end_t, node);
    Start = {@@testSet};   #  Start with all vertices of specified type(s)
    WHILE @@maxDiff > maxChange LIMIT maxIter DO
        @@maxDiff = 0;
        V = SELECT s FROM Start:s -(to_call:e)-> :t
        ACCUM CASE
        WHEN s.outdegree("to_call") != 0 then
            t.@received_score += s.@score/(s.outdegree("to_call"))
        END
        POST-ACCUM
        s.@score = (1.0-damping) + damping * s.@received_score,
        s.@received_score = 0,
        @@maxDiff += abs(s.@score - s.@score');
    END; # END WHILE loop
    #pgSHOW = SELECT s FROM Start:s where s.temp_delete_bool == False and abs(s.@score - 1) > 0.000000001
    pgSHOW = SELECT s FROM Start:s;
    #POST-ACCUM s.temp_pgscore = s.@score;
    Print pgSHOW[pgSHOW.@score];
}

install query pageRank_phone
