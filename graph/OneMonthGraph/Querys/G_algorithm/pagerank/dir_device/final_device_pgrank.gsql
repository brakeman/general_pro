use graph OneMonthNet

drop query pageRank_train_device
drop query reset
drop query pageRank_appr_sets_device
drop query pageRank_appr_files_device
drop query print_line
drop query sub_date_filter_device

CREATE OR REPLACE QUERY reset(STRING node) FOR GRAPH OneMonthNet
{
    init = {node.*};
    save_target = select t from init:t
    POST-ACCUM
    t.temp_save_bool = False, t.temp_pgscore = 0;
}


# select nodes that within the period;
CREATE OR REPLACE QUERY sub_date_filter_device(DATETIME start_t, DATETIME end_t, STRING node) FOR GRAPH OneMonthNet RETURNS(SetAccum<VERTEX>)
{
    SetAccum<VERTEX> @@phone;
    init = {node.*};
    save_target = select t from init:t
    POST-ACCUM
    FOREACH i IN t.datetime_set DO
        IF (i BETWEEN start_t AND end_t) THEN
            @@phone += t
        END
    END;
    RETURN @@phone;
}


CREATE OR REPLACE QUERY pageRank_train_device (DATETIME start_t, DATETIME end_t, STRING node, FLOAT maxChange, INT maxIter, FLOAT damping) FOR GRAPH OneMonthNet
{
    MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
    SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
    SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
    SetAccum<VERTEX> @@testSet;
    @@testSet += sub_date_filter_device(start_t, end_t, node);
    Start = {@@testSet};   #  Start with all vertices of specified type(s)
    WHILE @@maxDiff > maxChange LIMIT maxIter DO
        @@maxDiff = 0;
        V = SELECT s FROM Start:s -(device_to_device:e)-> :t
        ACCUM CASE
        WHEN s.outdegree("device_to_device") != 0 then
            t.@received_score += s.@score/(s.outdegree("device_to_device"))
        END
        POST-ACCUM
        s.@score = (1.0-damping) + damping * s.@received_score,
        s.@received_score = 0,
        @@maxDiff += abs(s.@score - s.@score');
    END; # END WHILE loop
    pgSHOW = SELECT s FROM Start:s
    POST-ACCUM s.temp_pgscore = s.@score, s.temp_save_bool=True;
}


CREATE OR REPLACE QUERY pageRank_appr_files_device (STRING file_path) FOR GRAPH OneMonthNet
{
    SumAccum<float> @received_score = 0;
    SetAccum<VERTEX> @@date_filter_nodes;
    SetAccum<VERTEX> @@neighs_as_source;
    test_set = SelectVertex(file_path, $0, Device, ",", false);
    vv = select s from test_set:s ACCUM
    @@neighs_as_source += s.neighbors("device_to_device").filter(s.temp_save_bool==True); # 找到近似用户的邻居，这些邻居必须在给定cutoff范围内,这个bool变量应该在train的同时赋值，是为了逼近线上情景；
    Start2 = {@@neighs_as_source};
    pgSHOW = SELECT s FROM Start2:s -(device_to_device:e)-> :t ACCUM CASE
    WHEN s.outdegree("device_to_device") != 0 then
        t.@received_score += s.temp_pgscore/(s.outdegree("device_to_device"))
    END;
    Print test_set;
}


CREATE OR REPLACE QUERY pageRank_appr_sets_device (SET<VERTEX> nodes) FOR GRAPH OneMonthNet
{
    SumAccum<float> @received_score = 0;
    SetAccum<VERTEX> @@date_filter_nodes;
    SetAccum<VERTEX> @@neighs_as_source;
    test_set = {nodes};
    vv = select s from test_set:s ACCUM
    @@neighs_as_source += s.neighbors("device_to_device").filter(s.temp_save_bool==True); # 找到近似用户的邻居，这些邻居必须在给定cutoff范围内,这个bool变量应该在train的同时赋值，是为了逼近线上情景；
    Start2 = {@@neighs_as_source};
    pgSHOW = SELECT s FROM Start2:s -(device_to_device:e)-> :t ACCUM CASE
    WHEN s.outdegree("device_to_device") != 0 then
        t.@received_score += s.temp_pgscore/(s.outdegree("device_to_device"))
    END;
    Print test_set;
}


CREATE OR REPLACE QUERY print_line(STRING fileLocation, DATETIME start_t, DATETIME end_t, STRING node) FOR GRAPH OneMonthNet
{
    FILE f1 (fileLocation);
    SetAccum<VERTEX> @@temp_save;
    SetAccum<VERTEX> @@temp_save2;
    @@temp_save += sub_date_filter_device(start_t, end_t, node);
    P = {@@temp_save};
    SHOW = SELECT v FROM P:v
    ACCUM f1.println(v.prim_id);
}

install query sub_date_filter_device
install query pageRank_appr_sets_device
install query pageRank_appr_files_device
install query pageRank_train_device
install query print_line
install query reset

