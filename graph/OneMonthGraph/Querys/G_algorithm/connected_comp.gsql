USE GRAPH OneMonthNet
CREATE DISTRIBUTED QUERY conn_comp () FOR GRAPH OneMonthNet
{
    MinAccum<int> @cc_id = 0;       //each vertex's tentative component id
    SumAccum<int> @old_id = 0;
    OrAccum<bool> @active;
    MapAccum<int, int> @@compSizes;
    Start = {ANY};
    S = SELECT x FROM Start:x
    POST-ACCUM x.@cc_id = getvid(x),
    x.@old_id = getvid(x);
    WHILE (Start.size()>0) DO
        Start = SELECT t FROM Start:s -(:e)-> :t
        ACCUM t.@cc_id += s.@cc_id // If s has a smaller id than t, copy the id to t
        POST-ACCUM
        CASE WHEN t.@old_id != t.@cc_id THEN // If t's id has changed
            t.@old_id = t.@cc_id,
            t.@active = true
        ELSE
            t.@active = false
        END
        HAVING t.@active == true;
    END;
    Start = {ANY};
    Start = SELECT s FROM Start:s
    POST-ACCUM @@compSizes += (s.@cc_id -> 1);
    PRINT @@compSizes;
    PRINT Start.@cc_id;
}
INSTALL QUERY conn_comp
run query conn_comp()
